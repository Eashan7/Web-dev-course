/* 
For responsive websites, always use :
1.) max-width instaed of width. Reason: If you set max-width, then when webpage viewd in smaller screens and width decreases, the width changes (decreases) according to content.
 2.) min-height instead of height. Reason: If you set min-height, then when webpage is viewd on smaller screens where width gets less and height increases, the height changes (increases) according to content
 3.)Use flex-wrap wherever possible. 
 */

*{
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}
.wrapper{
    height: 100vh;
    overflow-x: hidden;
    overflow-y: auto;
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
    background-color: lightgray;
}
.container{
    max-width: 50%;
    min-height: 100%;
    background-color: whitesmoke;
    padding: 1.5rem 2rem 1rem 3rem;
    font-family: sans-serif;
}
.menu, footer{
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    max-width: 100%;
    min-height: 15%;
    font-size: 0.6rem;
    padding-bottom: 3rem;
} 
footer{
    padding-bottom: 0.5rem;
}
nav.menu img{
    min-height:35%;
    max-width: 7%;
}
nav.menu ul{
    display: flex;
    flex-wrap: wrap;
    list-style-type: none;
    gap: 1rem;
    color: gray;
    text-shadow: 1px 0 0px rgba(0,0,0,0.1);
    padding-top: 0.5rem;
}
nav.menu li:hover, footer h5:hover{
    color: darkblue;
    transform: scale(1.02);
}
nav.menu button{
    min-height: 35%;
    max-width: 19%;
    padding: 0.5rem;
    background-color: rgb(4, 4, 222);
    color: white;
    border: none;
    border-radius: 5px;
    /* box-shadow: 1px 0 0 rgba(0,0,0,0.1); */
}
nav.menu button:hover{
    background-color: darkblue;
    transform: scale(1.03);
}
section.content1, section.content2{
    display: flex;
    /* justify-content: space-between; */
    min-height: 30%;
    padding-bottom: 1rem;
}
.heading{
    font-size: 1.2rem;
}
.desc{
    font-size: 0.6rem;
    max-width: 90%;
    color: gray;
}
section.content1 img{
    min-height: 70%;
    max-width: 40%;
}
section.content2 img{
    /* min-height: 10%; */
    max-width: 30%;
}
section.content1 img:hover, section.content2 img:hover, article h1:hover{
    transform: scale(1.1);
}
section.content2 img{
    margin-right: 3rem;
}
section.content2 + hr{ /*adjacent sibling selector*/
    margin-top: 1rem;
    max-width: 100%;
}
section hr{
    margin: 0.2rem 0 1rem 0rem;
    max-width: 35%;
}
footer{
    margin-top: 0.5rem;
}
footer h5{
    color: rgb(3, 3, 193);
    text-decoration: underline;
    padding: 0.5rem 0;
}
.privacy,.addressEmail,.menu2{
    min-height: 100%;
    max-width: 20%;
}
.images{
    display: flex;
    flex-wrap: wrap;
    gap: 0.2rem;
    min-height: 100%;
    /* max-width: 15%; */

    /* Notice: Here '.images' is a div container inside footer, and we have set footer as 'justify-content:space-between' i.e. spaces 
    between all flex items (i.e. '.images', '.menu2', '.addressEmail', '.privacy') will be equal. But it might so happen that the space 
    between flex items is too large, and you want to shorten it. In that case, apply a bigger width to any flex item 
    (like how we have given 'width: 15%' here to '.images'), and all other flex items will align in such a way that they
    are still equally spaced, but now that spacing is lesser. */
}
#logo2{
    min-height: 52%;
    max-width: 42%;
    padding: 0.5rem 0;
} 
.img{
    min-height: 50%;
    max-width: 50%;
}
footer button{
    height: 20%;
    padding: 1%;
    border-radius: 50%; /* To create round button, use 'border-radius: 50%' */
    background-color: blue;
    border: none;
    max-width: 20%;
}
footer button:hover{
    transform: scale(1.2);
    background-color: darkblue;
}
.menu2 ul{
    list-style-type: none;
}
