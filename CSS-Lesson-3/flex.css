/* Note: div elements occupy entire line. But the moment you
set display:flex the elements turn into flex items and all 
div elements are arranged in a single row like inline elements */

/* Note: We are using this universal selector to apply box-sizing:border-box
so that any div element does not increase in size due to margin or padding
Also this property helps us see the effect of "flex-basis:50%" that is used
later on in this code. So flex-basis 50% means the each flex item will take up 
50% of the flex width. What is flex? - The parent container
Now if we donot use box-sizing=border-box, then on sqweezing screen you might see
sometimes that only one flex item is there per row, when it is supposed to contain two flex items per row 
(cause each flex item is taking 50% width of flex). This happens because we have also added margins
to the flex items, so margin increases the total space of each flex item. Thus using box-sizing=border-box
allows us to keep box size constant inspite of adding margin or padding */

*{
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}
.container{
    height: 200px;
    border: 2px solid green;
    display: flex;
    flex-wrap: wrap;
/* 
1.) flex-direction specifies how the element will be displayed
i.e. whether as row or column. By default, flex-direction is row

    flex-direction: row;
    flex-direction: row-reverse;
    flex-direction: column;
    flex-direction: column-reverse; */

/*
2.) flex-wrap specifies whether flex items shall wrap or not 
deafult value: no-wrap
Wrap means if you sqweeze the screen size, the size of 
flex-item won't decrease, rather the element will shift 
downwards.
wrap-reverse means elements will be wrapped in reverse order
i.e. it will shift upwards on being squeezed

    flex-wrap: wrap;
    flex-wrap: wrap-reverse */

/*    
3.) justify-content aligns flex items on the main axis (i.e. x-axis)
of the parent container.

    justify-content: flex-start;
    justify-content: flex-end; 
    justify-content: center;
    justify-content: space-around;
    justify-content: space-between;
    justify-content: space-evenly; 

    Difference between space-between and space-around is though both
    will have even spacing between elements, in space-between, elements
    start at the starting point of main axix, while in space-around, 
    elements start at some distance from the starting point of main axis. 

    Remember only space-between starts from starting point of main axis
    Both space-around and space-evenly start at some distance from
    main-axis.

/*    
4.) align-items aligns flex items on the cross-axis (i.e. y-axis)
of the parent container.
Default value of align-items is stretch

    align-items: baseline; 
    align-items: flex-start;
    align-items: flex-end; 
    align-items: center;
    align-items: stretch;
    align-items: space-around;
    align-items: space-between;
    align-items: space-evenly; 

Difference between align-items: flex-start and align-items: baseline
is that 'flex-start' will align flex items at the starting of main-axis
of the parent flex container, while 'baseline' will align flex items 
along their content's baseline (especially visible when flex items are 
unevenly-sized). 

TO CENTER A FLEX ITEM USE: 
    justify-content:center
    align-items:center
    
/* 
5.) gap: 10px; 
creates gap between flex items
(short hand notation for row-gap and column-gap) */

/*   
6.) align-content applies to multiline flex boxes 

    align-content: flex-start;
    align-content: flex-end;
    align-content: center;
    align-content: space-between;
    align-content: space-around;
    align-content: space-evenly; */ 
}

/* 
7.) Order is used to change order of flex items
The more the order value, the farther away it is in the order of flex-items
By default, order of every flex item is zero */

#box1{
    order: 1;
}
#box3{
    order: 3;
}
#box2{
    order: 2;
}

/*
8.) 'flex-grow' property specifies how much the item will grow relative to
the rest of the flex items inside the same parent container 

Default value of flex-grow is 0 


#box1{
    flex-grow: 1;
} */

/* 
9.) 'flex-shrink' property specifies the speed with which a flex item will shrink
relative to the rest of the flex items inside the same parent container
when the screen is sqweezed. 

Default value of flex-shrink is 1 

REMEMBER: flex-shrink does not work if flex-wrap=wrap is declared 

#box2{
    flex-shrink: 3;
} */

/*
10.) 'flex-basis' does the same thing as width. Only difference is that if content overflows from a div element, 
width hides it, while flex-basis incorporates the overflow by increasing the width even when you've set a fixed value. */

.box{
    border: 1px solid brown;
    /* width: 100px; */
    flex-basis: 50%;
    background-color: aqua;
}

/*
11.) 'align-self' applies alignment along cross-axis like 'align-items' but it applies to individual flex items unlike align-items 
which applies to all flex items. Align-self overrides align-items. 
#box2{
    align-self: flex-start;
}
#box4{
    align-self: stretch;
}
#box3{
    align-self: flex-end;
}
#box1{
    align-self: center;
} */